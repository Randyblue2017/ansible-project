# Configure the AWS Provider
provider "aws" {
  region  = "us-west-2"
   access_key = ""
  secret_key = ""
}

/* resource "aws_instance" "ansi" {
  ami           = "ami-0"
  instance_type = "t2.micro"
  tags = {
    Name = "ansiblevm"
  }
}

resource "aws_instance" "ansib" {
  ami           = "ami-03d5"
  instance_type = "t2.micro"
  tags = {
    Name = "jenkin"
  }
}

resource "aws_instance" "ubuntuserver" {
  ami           = "ami-03d"
  instance_type = "t2.micro"
  tags = {
    Name = "ansiblet"
  }
}
 */
/* resource "<provider>_<resource_type>" "name" {
    config options..... 
    key = "value"
    key2 = "another value"
} */

/* 
resource "aws_vpc" "projectvpc2" {
  cidr_block = "10.1.0.0/16"
  tags = {
    Name = "ansible-project-vpc"
  }
}

resource "aws_subnet" "subnet-2" {
  vpc_id            = aws_vpc.projectvpc2.id
  cidr_block        = "10.1.1.0/24"
  availability_zone = "us-west-2a"
  tags = {
    Name = "ansible-project-subnet2"
  }
} */

#Tasks to perform

# 1. Create Custom vpc
resource "aws_vpc" "projectvpc" {
  cidr_block = "10.0.0.0/16"
  tags = {
    Name = "ansible-project-vpc"
  }
}

# 2. Create Internet Gateway

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.projectvpc.id

  tags = {
    Name = "ansibleproject-IGW"
  }
}

# 3. Create Custom Route Table

resource "aws_route_table" "ansible-route-table" {
  vpc_id = aws_vpc.projectvpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  route {
    ipv6_cidr_block        = "::/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = "ansibleproject-route-table"
  }
}

# 4. Create a subnet

resource "aws_subnet" "subnet-1" {
  vpc_id            = aws_vpc.projectvpc.id
  cidr_block        = "10.0.1.0/24"
  availability_zone = "us-west-2a"
  tags = {
    Name = "ansible-project-subnet"
  }
}

# 5. Associate subnet with route Table

resource "aws_route_table_association" "a" {
  subnet_id      = aws_subnet.subnet-1.id
  route_table_id = aws_route_table.ansible-route-table.id
}

# 6. Create Security Group to allow Port 22,80,443

resource "aws_security_group" "allow_web" {
  name        = "allow_web_traffic"
  description = "Allow web inbound traffic"
  vpc_id      = aws_vpc.projectvpc.id

  ingress {
    description      = "HTTPS"
    from_port        = 443
    to_port          = 443
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

 ingress {
    description      = "HTTP"
    from_port        = 80
    to_port          = 80
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

 ingress {
    description      = "SSH"
    from_port        = 22
    to_port          = 22
    protocol         = "tcp"
    cidr_blocks      = ["0.0.0.0/0"]
  }

  egress {
      from_port        = 0
      to_port          = 0
      protocol         = "-1"
      cidr_blocks      = ["0.0.0.0/0"]
  }

  tags = {
    Name = "ansibleproject-SG"
  }
}

# 7. Create a network interface with an ip in the subnet that was created in step 4

resource "aws_network_interface" "web-server-NIC" {
  subnet_id       = aws_subnet.subnet-1.id
  private_ips     = ["10.0.1.50"]
  security_groups = [aws_security_group.allow_web.id]

}

# 8. Assign an elastic IP to the network interface created in step 7

resource "aws_eip" "ansibleproject-eip" {
  vpc                       = true
  network_interface         = aws_network_interface.web-server-NIC.id
  associate_with_private_ip = "10.0.1.50"
  depends_on                = [aws_internet_gateway.gw]
}

# 9. Create ubuntu server and install/enable apaches2

resource "aws_instance" "ansible" {
  ami           = "ami-0"
  instance_type = "t2.micro"
  availability_zone = "us-west-2a"
  key_name = "Ansi"
  
  network_interface {
      device_index = 0
      network_interface_id = aws_network_interface.web-server-NIC.id
  }




 /*  user_data = <<-EOF
              #!/bin/bash
              sudo apt update -y
              sudo apt install apache2 -y
              sudo systemctl start apache2
              sudo bash -c 'echo my first web server > /var/www/html/index.html'
              EOF */

  user_data = <<-EOF
              #!/bin/bash
              sudo apt update -y
              sudo apt install ansible -y
              EOF

  tags = {
    Name = "ansibleproject-vm"
  }
}


resource "aws_instance" "ansibleserver" {
  ami           = "ami-03d5c"
  instance_type = "t2.micro"
  availability_zone = "us-west-2a"
  key_name = "Ansib"
  
 /*  network_interface {
      device_index = 0
      network_interface_id = aws_network_interface.web-server-NIC.id
  } */

  tags = {
    Name = "jenkin"
  }
}

resource "aws_instance" "ubuntu" {
  ami           = "ami-03d5c6"
  instance_type = "t2.micro"
  availability_zone = "us-west-2a"
  key_name = "A"

  /* network_interface {
      device_index = 0
      network_interface_id = aws_network_interface.web-server-NIC.id
  } */

  tags = {
    Name = "ansibleta"
  }
}
